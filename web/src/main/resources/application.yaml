server:
  port: 9090

spring:
  output:
    ansi:
      enabled: always
  threads:
    virtual:
      enabled: true
  main:
    allow-circular-references: true
  datasource:
    driver-class-name: org.apache.shardingsphere.driver.ShardingSphereDriver
    url: jdbc:shardingsphere:classpath:sharding.yaml
  servlet:
    multipart:
      enabled: true
      max-file-size: 20MB
      max-request-size: 20MB
  data:
    redis:
      host: 127.0.0.1
      port: 6379
      password: 123456
      lettuce:
        pool:
          min-idle: 1
          max-idle: 8
          max-active: 8
          max-wait: 3000
  thymeleaf:
    prefix: classpath:/templates/
    cache: true
    suffix: .html
  mail:
    default-encoding: utf-8
    host: smtp.qq.com
    port: 587
    username: 1085385084@qq.com
    password: bwmuexbfttocibja
    from: 1085385084@qq.com
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
      client:
        config:
          default:
            loggerLevel: basic
            connect-timeout: 5000
            read-timeout: 5000
      httpclient:
        hc5:
          enabled: true
        max-connections: 500
        max-connections-per-route: 100


logging:
  level:
    root: info
    org.imtp.web: info
    org.imtp.web.feign: debug
    org.springframework.security: info
  pattern:
    console: "%d{yyyy/MM/dd HH:mm:ss.SSS} %highlight(%-5level) %clr([traceId: %X{traceId}]) [%thread] %cyan(%logger) : %msg %n"
zookeeper:
  servers: 127.0.0.1:2181
  sessionTimeout: 3000

minio:
  endpoint: http://localhost:9000
  bucketName: y-chat-bucket
  accessKey: xxx
  secretKey: xxx

mybatis-plus:
  mapper-locations: classpath:mapper/*xml
  configuration:
    map-underscore-to-camel-case: true


auth:
  # 基于请求头的身份认证
  requestHeadAuthentications:
    - antPath: /api/internal/**
      apikey: 26662f07703c41d2a4994b8b30b101a9
  # 用户设备最大token数量
  coexistToken: 1
  # jwt token配置
  jwt:
    secretKey: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
    # 单位：s:秒 m:分钟 h:小时 d:天 默认 秒
    expiration: 24h
    refreshExpiration: 30d
  # 记住密码
  rememberMe:
    secretKey: 209E335266556A586E3272357538782F413A4428472B4B6250645367566B5B76
    # 单位：s:秒 m:分钟 h:小时 d:天 默认 秒
    expiration: 7d
  # oauh2 三方登录配置
  other-login:
    self:
      clientName: Self
      clientId: xxx
      clientSecret: xxx
      redirectUrl: http://localhost:3000/login
      scope: userInfo+openid
      authCodeUrl: http://127.0.0.1:9090/oauth2/authorize?client_id=${auth.other-login.self.clientId}&scope=${auth.other-login.self.scope}&response_type=code&state=Self&redirect_uri=${auth.other-login.self.redirectUrl}
      deviceCodeUrl: http://127.0.0.1:9090/oauth2/device_authorization?client_id=${auth.other-login.self.clientId}&client_secret=${auth.other-login.self.clientSecret}&scope=userInfo
      tokenUrl: http://127.0.0.1:9090/oauth2/token
      userInfoUrl: http://127.0.0.1:9090/userinfo
    github:
      clientName: Github
      clientId: xxx
      clientSecret: xxx
      redirectUrl: http://localhost:3000/login
      scope: user
      authCodeUrl: https://github.com/login/oauth/authorize?client_id=${auth.other-login.github.clientId}&scope=${auth.other-login.github.scope}&state=Github&redirect_uri=${auth.other-login.github.redirectUrl}
      tokenUrl: https://github.com/login/oauth/access_token
      userInfoUrl: https://api.github.com/user
      userEmailsUrl: https://api.github.com/user/emails
    google:
      clientName: Google
      clientId: xxx
      clientSecret: xxx
      redirectUrlWeb: http://localhost:3000/login
      redirectUrlApp: http://ychat.com/login
      scope: https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/userinfo.profile+openid
      authCodeUrl: https://accounts.google.com/o/oauth2/v2/auth?client_id=${auth.other-login.google.clientId}&scope=${auth.other-login.google.scope}&response_type=code&access_type=offline&prompt=consent&state=Google
      tokenUrl: https://oauth2.googleapis.com/token
      userInfoUrl: https://www.googleapis.com/oauth2/v3/userinfo
    microsoft:
      clientName: Microsoft
      clientId: xxx
      clientSecret: xxx
      tenantId: c719f474-19d6-42af-a36f-1f264ac08653
      redirectUrl: http://localhost:3000/login
      scope: https://graph.microsoft.com/User.Read
      authCodeUrl: https://login.microsoftonline.com/${auth.other-login.microsoft.tenantId}/oauth2/v2.0/authorize?client_id=${auth.other-login.microsoft.clientId}&client_secret=${auth.other-login.microsoft.clientSecret}&scope=${auth.other-login.microsoft.scope}&response_type=code&state=Microsoft&redirect_uri=${auth.other-login.microsoft.redirectUrl}
      tokenUrl: https://login.microsoftonline.com/${auth.other-login.microsoft.tenantId}/oauth2/v2.0/token
      userInfoUrl: https://graph.microsoft.com/oidc/userinfo



# 使用resilience4j 熔断降级配置
resilience4j:
# 断路器
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50 #以百分⽐配置失败率阈值。当失败率等于或⼤于阈值时，断路器状态并关闭变为开启，并进⾏服务降级
        slidingWindowSize: 10 #滑动窗⼝的⼤⼩ 配置COUNT_BASED,表示n个请求，配置TIME_BASED表示n秒
        minimumNumberOfCalls: 8 #断路器计算失败率或慢调⽤率之前所需的最⼩调⽤数（每个滑动窗⼝周期）
        slidingWindowType: TIME_BASED #滑动窗⼝类型是COUNT_BASED，将会统计记录最近slidingWindowSize次调⽤的结果。如果是TIME_BASED，将会统计记录最近 slidingWindowSize秒的调⽤结果
        permittedNumberOfCallsInHalfOpenState: 10 #断路器在半开状态下允许通过的调⽤次数。
        waitDurationInOpenState: 2s # 断路器从开启过渡到半开应等待的时间
        registerHealthIndicator: true # 健康监测
        automaticTransitionFromOpenToHalfOpenEnabled: false # 是否自动从打开到半开，不需要触发 设置为false，则只有在发出调⽤时才会转换到半开
        recordExceptions: #记录为失败并因此增加失败率的异常列表。除⾮通过ignoreExceptions显式忽略，否则与列表中某个匹配或继承的异常都将被视为失败。 如果指定异常列表，则所有其他异常均视为成功，除⾮它们被ignoreExceptions显式忽略
          - java.lang.Exception
        ignore-exceptions:
          - org.imtp.web.config.exception.BusinessException
          - org.springframework.security.core.AuthenticationException
          - org.springframework.security.access.AccessDeniedException
    instances:
      # 公共断路器: 单位窗口时间10秒内最低8个请求有百分之50的请求都是异常的时 触发该断路器
      commonBreaker:
        base-config: default #继承默认配置default
      # 慢调用断路器: 单位窗口时间10秒内最低8个请求有百分之30调用时间都是超过3秒时 触发该断路器
      slowCallBreaker:
        failureRateThreshold: 50
        slowCallDurationThreshold: 3s #慢调⽤时间阈值，⾼于这个阈值的呼叫视为慢调⽤，并增加慢调⽤⽐例。
        slowCallRateThreshold: 30 #以百分⽐的⽅式配置，断路器把调⽤时间⼤于slowCallDurationThreshold的调⽤视为慢调⽤，当慢调⽤⽐例⼤于等于阈值时，断路器开启，并进⾏服务降级
        minimumNumberOfCalls: 8
        slidingWindowSize: 10
        slidingWindowType: TIME_BASED
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间
# 限时器
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true
    instances:
      AppFuse:
        # 公共限时: 5秒
        base-config: default
# 限速器
  ratelimiter:
    configs:
      default:
        timeoutDuration: 10ms
        limitRefreshPeriod: 1s
        limitForPeriod: 2000
    instances:
      # 公共限流: 1秒允许2000个请求，触发限流时客户端等待10ms响应
      commonRatelimiter:
        base-config: default
# 重试器
  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - org.imtp.web.config.exception.RetryException
    instances:
      # 公共重试器: 当抛出RetryException异常时进行重试，重试3次，间隔500毫秒
      commonRetry:
        base-config: default
# 信号量并发限制器
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 50
        maxWaitDuration: 100ms
    instances:
      # 公共并发限制器: 最多允许50个并发 达到限制时客户端等待100ms仍未获取资源后进行降级
      commonBulkhead:
        base-config: default
# 线程池限制器
  thread-pool-bulkhead:
    configs:
      default:
        coreThreadPoolSize: 10
        maxThreadPoolSize: 50
        queueCapacity: 1000
        keepAliveDuration: 20ms
    instances:
      commonThreadPoolBulkhead:
        # 公共线程池限制器: 线程池耗尽时进行降级
        base-config: default


pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true

http:
  config:
    # 单位：秒
    connectionRequestTimeout: 5
    responseTimeout: 60
    proxy: 'http://127.0.0.1:1081'
